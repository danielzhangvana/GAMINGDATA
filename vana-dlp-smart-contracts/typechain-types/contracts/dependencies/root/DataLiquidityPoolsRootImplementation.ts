/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IDataLiquidityPoolsRoot {
  export type DlpEpochInfoStruct = {
    ttf: BigNumberish;
    tfc: BigNumberish;
    vdu: BigNumberish;
    uw: BigNumberish;
    stakeAmount: BigNumberish;
    isTopDlp: boolean;
    rewardAmount: BigNumberish;
    stakersPercentage: BigNumberish;
  };

  export type DlpEpochInfoStructOutput = [
    ttf: bigint,
    tfc: bigint,
    vdu: bigint,
    uw: bigint,
    stakeAmount: bigint,
    isTopDlp: boolean,
    rewardAmount: bigint,
    stakersPercentage: bigint
  ] & {
    ttf: bigint;
    tfc: bigint;
    vdu: bigint;
    uw: bigint;
    stakeAmount: bigint;
    isTopDlp: boolean;
    rewardAmount: bigint;
    stakersPercentage: bigint;
  };

  export type DlpResponseStruct = {
    id: BigNumberish;
    dlpAddress: AddressLike;
    ownerAddress: AddressLike;
    status: BigNumberish;
    registrationBlockNumber: BigNumberish;
    grantedAmount: BigNumberish;
    stakersPercentage: BigNumberish;
    stakeAmount: BigNumberish;
  };

  export type DlpResponseStructOutput = [
    id: bigint,
    dlpAddress: string,
    ownerAddress: string,
    status: bigint,
    registrationBlockNumber: bigint,
    grantedAmount: bigint,
    stakersPercentage: bigint,
    stakeAmount: bigint
  ] & {
    id: bigint;
    dlpAddress: string;
    ownerAddress: string;
    status: bigint;
    registrationBlockNumber: bigint;
    grantedAmount: bigint;
    stakersPercentage: bigint;
    stakeAmount: bigint;
  };

  export type EpochInfoStruct = {
    startBlock: BigNumberish;
    endBlock: BigNumberish;
    reward: BigNumberish;
    isFinalised: boolean;
    dlpIds: BigNumberish[];
  };

  export type EpochInfoStructOutput = [
    startBlock: bigint,
    endBlock: bigint,
    reward: bigint,
    isFinalised: boolean,
    dlpIds: bigint[]
  ] & {
    startBlock: bigint;
    endBlock: bigint;
    reward: bigint;
    isFinalised: boolean;
    dlpIds: bigint[];
  };

  export type DlpPerformanceStruct = {
    dlpId: BigNumberish;
    ttf: BigNumberish;
    tfc: BigNumberish;
    vdu: BigNumberish;
    uw: BigNumberish;
  };

  export type DlpPerformanceStructOutput = [
    dlpId: bigint,
    ttf: bigint,
    tfc: bigint,
    vdu: bigint,
    uw: bigint
  ] & { dlpId: bigint; ttf: bigint; tfc: bigint; vdu: bigint; uw: bigint };

  export type StakerDlpEpochInfoStruct = {
    dlpId: BigNumberish;
    epochId: BigNumberish;
    stakeAmount: BigNumberish;
    rewardAmount: BigNumberish;
    claimAmount: BigNumberish;
  };

  export type StakerDlpEpochInfoStructOutput = [
    dlpId: bigint,
    epochId: bigint,
    stakeAmount: bigint,
    rewardAmount: bigint,
    claimAmount: bigint
  ] & {
    dlpId: bigint;
    epochId: bigint;
    stakeAmount: bigint;
    rewardAmount: bigint;
    claimAmount: bigint;
  };

  export type StakerDlpInfoStruct = {
    dlpId: BigNumberish;
    stakeAmount: BigNumberish;
    lastClaimedEpochId: BigNumberish;
  };

  export type StakerDlpInfoStructOutput = [
    dlpId: bigint,
    stakeAmount: bigint,
    lastClaimedEpochId: bigint
  ] & { dlpId: bigint; stakeAmount: bigint; lastClaimedEpochId: bigint };
}

export declare namespace DataLiquidityPoolsRootImplementation {
  export type InitParamsStruct = {
    ownerAddress: AddressLike;
    maxNumberOfRegisteredDlps: BigNumberish;
    numberOfTopDlps: BigNumberish;
    minDlpStakeAmount: BigNumberish;
    startBlock: BigNumberish;
    epochSize: BigNumberish;
    epochRewardAmount: BigNumberish;
    ttfPercentage: BigNumberish;
    tfcPercentage: BigNumberish;
    vduPercentage: BigNumberish;
    uwPercentage: BigNumberish;
  };

  export type InitParamsStructOutput = [
    ownerAddress: string,
    maxNumberOfRegisteredDlps: bigint,
    numberOfTopDlps: bigint,
    minDlpStakeAmount: bigint,
    startBlock: bigint,
    epochSize: bigint,
    epochRewardAmount: bigint,
    ttfPercentage: bigint,
    tfcPercentage: bigint,
    vduPercentage: bigint,
    uwPercentage: bigint
  ] & {
    ownerAddress: string;
    maxNumberOfRegisteredDlps: bigint;
    numberOfTopDlps: bigint;
    minDlpStakeAmount: bigint;
    startBlock: bigint;
    epochSize: bigint;
    epochRewardAmount: bigint;
    ttfPercentage: bigint;
    tfcPercentage: bigint;
    vduPercentage: bigint;
    uwPercentage: bigint;
  };
}

export interface DataLiquidityPoolsRootImplementationInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "acceptOwnership"
      | "addRewardForDlps"
      | "claimReward"
      | "claimRewardUntilEpoch"
      | "claimableAmount"
      | "createEpochs"
      | "createEpochsUntilBlockNumber"
      | "deregisterDlp"
      | "distributeStakeAfterDeregistration"
      | "dlpEpochs"
      | "dlpIds"
      | "dlps"
      | "dlpsByAddress"
      | "dlpsCount"
      | "epochRewardAmount"
      | "epochSize"
      | "epochs"
      | "epochsCount"
      | "estimatedDlpReward"
      | "initialize"
      | "maxNumberOfRegisteredDlps"
      | "minDlpStakeAmount"
      | "numberOfTopDlps"
      | "owner"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "proxiableUUID"
      | "registerDlp"
      | "registerDlpWithGrant"
      | "registeredDlps"
      | "renounceOwnership"
      | "saveEpochPerformances"
      | "stake"
      | "stakerDlpEpochs"
      | "stakerDlps"
      | "stakerDlpsList"
      | "stakerDlpsListCount"
      | "tfcPercentage"
      | "topDlpIds"
      | "totalDlpsRewardAmount"
      | "transferOwnership"
      | "ttfPercentage"
      | "unpause"
      | "unstake"
      | "unstakebleAmount"
      | "updateDlpStakersPercentage"
      | "updateEpochRewardAmount"
      | "updateEpochSize"
      | "updateMaxNumberOfRegisteredDlps"
      | "updateMinDlpStakeAmount"
      | "updateNumberOfTopDlps"
      | "updatePerformancePercentages"
      | "upgradeToAndCall"
      | "uwPercentage"
      | "vduPercentage"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DlpDeregistered"
      | "DlpRegistered"
      | "DlpStakersPercentageUpdated"
      | "EpochCreated"
      | "EpochPerformancesSaved"
      | "EpochRewardAmountUpdated"
      | "EpochSizeUpdated"
      | "Initialized"
      | "MaxNumberOfRegisteredDlpsUpdated"
      | "MinDlpStakeAmountUpdated"
      | "NumberOfTopDlpsUpdated"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Paused"
      | "PerformancePercentagesUpdated"
      | "Staked"
      | "StakerDlpEpochRewardClaimed"
      | "Unpaused"
      | "Unstaked"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardForDlps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardUntilEpoch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createEpochsUntilBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterDlp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeStakeAfterDeregistration",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dlpEpochs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dlpIds", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "dlps", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "dlpsByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "dlpsCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epochSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedDlpReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [DataLiquidityPoolsRootImplementation.InitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "maxNumberOfRegisteredDlps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDlpStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfTopDlps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerDlp",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDlpWithGrant",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredDlps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveEpochPerformances",
    values: [
      BigNumberish,
      IDataLiquidityPoolsRoot.DlpPerformanceStruct[],
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakerDlpEpochs",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerDlps",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerDlpsList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerDlpsListCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tfcPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topDlpIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDlpsRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ttfPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakebleAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDlpStakersPercentage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpochRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpochSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxNumberOfRegisteredDlps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinDlpStakeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNumberOfTopDlps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerformancePercentages",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uwPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vduPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardForDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardUntilEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEpochsUntilBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterDlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeStakeAfterDeregistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dlpEpochs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dlpIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dlps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dlpsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dlpsCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedDlpReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxNumberOfRegisteredDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDlpStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfTopDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDlpWithGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveEpochPerformances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerDlpEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakerDlps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerDlpsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerDlpsListCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tfcPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topDlpIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDlpsRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ttfPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakebleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDlpStakersPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEpochRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEpochSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxNumberOfRegisteredDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinDlpStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNumberOfTopDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePerformancePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uwPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vduPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace DlpDeregisteredEvent {
  export type InputTuple = [dlpId: BigNumberish];
  export type OutputTuple = [dlpId: bigint];
  export interface OutputObject {
    dlpId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DlpRegisteredEvent {
  export type InputTuple = [
    dlpId: BigNumberish,
    dlpAddress: AddressLike,
    ownerAddress: AddressLike
  ];
  export type OutputTuple = [
    dlpId: bigint,
    dlpAddress: string,
    ownerAddress: string
  ];
  export interface OutputObject {
    dlpId: bigint;
    dlpAddress: string;
    ownerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DlpStakersPercentageUpdatedEvent {
  export type InputTuple = [
    dlpId: BigNumberish,
    stakersPercentage: BigNumberish
  ];
  export type OutputTuple = [dlpId: bigint, stakersPercentage: bigint];
  export interface OutputObject {
    dlpId: bigint;
    stakersPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochCreatedEvent {
  export type InputTuple = [epochId: BigNumberish];
  export type OutputTuple = [epochId: bigint];
  export interface OutputObject {
    epochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochPerformancesSavedEvent {
  export type InputTuple = [epochId: BigNumberish, isFinalised: boolean];
  export type OutputTuple = [epochId: bigint, isFinalised: boolean];
  export interface OutputObject {
    epochId: bigint;
    isFinalised: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochRewardAmountUpdatedEvent {
  export type InputTuple = [newEpochRewardAmount: BigNumberish];
  export type OutputTuple = [newEpochRewardAmount: bigint];
  export interface OutputObject {
    newEpochRewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochSizeUpdatedEvent {
  export type InputTuple = [newEpochSize: BigNumberish];
  export type OutputTuple = [newEpochSize: bigint];
  export interface OutputObject {
    newEpochSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxNumberOfRegisteredDlpsUpdatedEvent {
  export type InputTuple = [newMaxNumberOfRegisteredDlps: BigNumberish];
  export type OutputTuple = [newMaxNumberOfRegisteredDlps: bigint];
  export interface OutputObject {
    newMaxNumberOfRegisteredDlps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinDlpStakeAmountUpdatedEvent {
  export type InputTuple = [newMinDlpStakeAmount: BigNumberish];
  export type OutputTuple = [newMinDlpStakeAmount: bigint];
  export interface OutputObject {
    newMinDlpStakeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NumberOfTopDlpsUpdatedEvent {
  export type InputTuple = [newNumberOfTopDlps: BigNumberish];
  export type OutputTuple = [newNumberOfTopDlps: bigint];
  export interface OutputObject {
    newNumberOfTopDlps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformancePercentagesUpdatedEvent {
  export type InputTuple = [
    newTtfPercentage: BigNumberish,
    newTfcPercentage: BigNumberish,
    newVduPercentage: BigNumberish,
    newUwPercentage: BigNumberish
  ];
  export type OutputTuple = [
    newTtfPercentage: bigint,
    newTfcPercentage: bigint,
    newVduPercentage: bigint,
    newUwPercentage: bigint
  ];
  export interface OutputObject {
    newTtfPercentage: bigint;
    newTfcPercentage: bigint;
    newVduPercentage: bigint;
    newUwPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    staker: AddressLike,
    dlpId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [staker: string, dlpId: bigint, amount: bigint];
  export interface OutputObject {
    staker: string;
    dlpId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakerDlpEpochRewardClaimedEvent {
  export type InputTuple = [
    staker: AddressLike,
    dlpId: BigNumberish,
    epochId: BigNumberish,
    claimAmount: BigNumberish
  ];
  export type OutputTuple = [
    staker: string,
    dlpId: bigint,
    epochId: bigint,
    claimAmount: bigint
  ];
  export interface OutputObject {
    staker: string;
    dlpId: bigint;
    epochId: bigint;
    claimAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [
    staker: AddressLike,
    dlpId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [staker: string, dlpId: bigint, amount: bigint];
  export interface OutputObject {
    staker: string;
    dlpId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataLiquidityPoolsRootImplementation extends BaseContract {
  connect(runner?: ContractRunner | null): DataLiquidityPoolsRootImplementation;
  waitForDeployment(): Promise<this>;

  interface: DataLiquidityPoolsRootImplementationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addRewardForDlps: TypedContractMethod<[], [void], "payable">;

  claimReward: TypedContractMethod<[dlpId: BigNumberish], [void], "nonpayable">;

  claimRewardUntilEpoch: TypedContractMethod<
    [dlpId: BigNumberish, lastEpochToClaim: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimableAmount: TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [bigint],
    "view"
  >;

  createEpochs: TypedContractMethod<[], [void], "nonpayable">;

  createEpochsUntilBlockNumber: TypedContractMethod<
    [blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  deregisterDlp: TypedContractMethod<
    [dlpId: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributeStakeAfterDeregistration: TypedContractMethod<
    [dlpId: BigNumberish, dlpOwnerAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  dlpEpochs: TypedContractMethod<
    [dlpId: BigNumberish, epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.DlpEpochInfoStructOutput],
    "view"
  >;

  dlpIds: TypedContractMethod<[dlpAddress: AddressLike], [bigint], "view">;

  dlps: TypedContractMethod<
    [dlpId: BigNumberish],
    [IDataLiquidityPoolsRoot.DlpResponseStructOutput],
    "view"
  >;

  dlpsByAddress: TypedContractMethod<
    [dlpAddress: AddressLike],
    [IDataLiquidityPoolsRoot.DlpResponseStructOutput],
    "view"
  >;

  dlpsCount: TypedContractMethod<[], [bigint], "view">;

  epochRewardAmount: TypedContractMethod<[], [bigint], "view">;

  epochSize: TypedContractMethod<[], [bigint], "view">;

  epochs: TypedContractMethod<
    [epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.EpochInfoStructOutput],
    "view"
  >;

  epochsCount: TypedContractMethod<[], [bigint], "view">;

  estimatedDlpReward: TypedContractMethod<
    [dlpId: BigNumberish],
    [
      [bigint, bigint] & {
        historyRewardEstimation: bigint;
        stakeRewardEstimation: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [params: DataLiquidityPoolsRootImplementation.InitParamsStruct],
    [void],
    "nonpayable"
  >;

  maxNumberOfRegisteredDlps: TypedContractMethod<[], [bigint], "view">;

  minDlpStakeAmount: TypedContractMethod<[], [bigint], "view">;

  numberOfTopDlps: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  registerDlp: TypedContractMethod<
    [
      dlpAddress: AddressLike,
      dlpOwnerAddress: AddressLike,
      stakersPercentage: BigNumberish
    ],
    [void],
    "payable"
  >;

  registerDlpWithGrant: TypedContractMethod<
    [
      dlpAddress: AddressLike,
      dlpOwnerAddress: AddressLike,
      stakersPercentage: BigNumberish
    ],
    [void],
    "payable"
  >;

  registeredDlps: TypedContractMethod<[], [bigint[]], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  saveEpochPerformances: TypedContractMethod<
    [
      epochId: BigNumberish,
      dlpPerformances: IDataLiquidityPoolsRoot.DlpPerformanceStruct[],
      isFinalised: boolean
    ],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[dlpId: BigNumberish], [void], "payable">;

  stakerDlpEpochs: TypedContractMethod<
    [staker: AddressLike, dlpId: BigNumberish, epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.StakerDlpEpochInfoStructOutput],
    "view"
  >;

  stakerDlps: TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [IDataLiquidityPoolsRoot.StakerDlpInfoStructOutput],
    "view"
  >;

  stakerDlpsList: TypedContractMethod<
    [stakerAddress: AddressLike],
    [IDataLiquidityPoolsRoot.StakerDlpInfoStructOutput[]],
    "view"
  >;

  stakerDlpsListCount: TypedContractMethod<
    [staker: AddressLike],
    [bigint],
    "view"
  >;

  tfcPercentage: TypedContractMethod<[], [bigint], "view">;

  topDlpIds: TypedContractMethod<
    [numberOfDlps: BigNumberish],
    [bigint[]],
    "view"
  >;

  totalDlpsRewardAmount: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  ttfPercentage: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unstake: TypedContractMethod<
    [dlpId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  unstakebleAmount: TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [bigint],
    "view"
  >;

  updateDlpStakersPercentage: TypedContractMethod<
    [dlpId: BigNumberish, stakersPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateEpochRewardAmount: TypedContractMethod<
    [newEpochRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateEpochSize: TypedContractMethod<
    [newEpochSize: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxNumberOfRegisteredDlps: TypedContractMethod<
    [newMaxNumberOfRegisteredDlps: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinDlpStakeAmount: TypedContractMethod<
    [newMinDlpStakeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateNumberOfTopDlps: TypedContractMethod<
    [newNumberOfTopDlps: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePerformancePercentages: TypedContractMethod<
    [
      newTtfPercentage: BigNumberish,
      newTfcPercentage: BigNumberish,
      newVduPercentage: BigNumberish,
      newUwPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  uwPercentage: TypedContractMethod<[], [bigint], "view">;

  vduPercentage: TypedContractMethod<[], [bigint], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addRewardForDlps"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[dlpId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRewardUntilEpoch"
  ): TypedContractMethod<
    [dlpId: BigNumberish, lastEpochToClaim: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimableAmount"
  ): TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createEpochs"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEpochsUntilBlockNumber"
  ): TypedContractMethod<[blockNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deregisterDlp"
  ): TypedContractMethod<[dlpId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeStakeAfterDeregistration"
  ): TypedContractMethod<
    [dlpId: BigNumberish, dlpOwnerAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dlpEpochs"
  ): TypedContractMethod<
    [dlpId: BigNumberish, epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.DlpEpochInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "dlpIds"
  ): TypedContractMethod<[dlpAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "dlps"
  ): TypedContractMethod<
    [dlpId: BigNumberish],
    [IDataLiquidityPoolsRoot.DlpResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "dlpsByAddress"
  ): TypedContractMethod<
    [dlpAddress: AddressLike],
    [IDataLiquidityPoolsRoot.DlpResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "dlpsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochRewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochs"
  ): TypedContractMethod<
    [epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.EpochInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "epochsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimatedDlpReward"
  ): TypedContractMethod<
    [dlpId: BigNumberish],
    [
      [bigint, bigint] & {
        historyRewardEstimation: bigint;
        stakeRewardEstimation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [params: DataLiquidityPoolsRootImplementation.InitParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxNumberOfRegisteredDlps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDlpStakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfTopDlps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerDlp"
  ): TypedContractMethod<
    [
      dlpAddress: AddressLike,
      dlpOwnerAddress: AddressLike,
      stakersPercentage: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registerDlpWithGrant"
  ): TypedContractMethod<
    [
      dlpAddress: AddressLike,
      dlpOwnerAddress: AddressLike,
      stakersPercentage: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registeredDlps"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "saveEpochPerformances"
  ): TypedContractMethod<
    [
      epochId: BigNumberish,
      dlpPerformances: IDataLiquidityPoolsRoot.DlpPerformanceStruct[],
      isFinalised: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[dlpId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "stakerDlpEpochs"
  ): TypedContractMethod<
    [staker: AddressLike, dlpId: BigNumberish, epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.StakerDlpEpochInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakerDlps"
  ): TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [IDataLiquidityPoolsRoot.StakerDlpInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakerDlpsList"
  ): TypedContractMethod<
    [stakerAddress: AddressLike],
    [IDataLiquidityPoolsRoot.StakerDlpInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakerDlpsListCount"
  ): TypedContractMethod<[staker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tfcPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "topDlpIds"
  ): TypedContractMethod<[numberOfDlps: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "totalDlpsRewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ttfPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<
    [dlpId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unstakebleAmount"
  ): TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateDlpStakersPercentage"
  ): TypedContractMethod<
    [dlpId: BigNumberish, stakersPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEpochRewardAmount"
  ): TypedContractMethod<
    [newEpochRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEpochSize"
  ): TypedContractMethod<[newEpochSize: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxNumberOfRegisteredDlps"
  ): TypedContractMethod<
    [newMaxNumberOfRegisteredDlps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMinDlpStakeAmount"
  ): TypedContractMethod<
    [newMinDlpStakeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateNumberOfTopDlps"
  ): TypedContractMethod<
    [newNumberOfTopDlps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePerformancePercentages"
  ): TypedContractMethod<
    [
      newTtfPercentage: BigNumberish,
      newTfcPercentage: BigNumberish,
      newVduPercentage: BigNumberish,
      newUwPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "uwPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vduPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "DlpDeregistered"
  ): TypedContractEvent<
    DlpDeregisteredEvent.InputTuple,
    DlpDeregisteredEvent.OutputTuple,
    DlpDeregisteredEvent.OutputObject
  >;
  getEvent(
    key: "DlpRegistered"
  ): TypedContractEvent<
    DlpRegisteredEvent.InputTuple,
    DlpRegisteredEvent.OutputTuple,
    DlpRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DlpStakersPercentageUpdated"
  ): TypedContractEvent<
    DlpStakersPercentageUpdatedEvent.InputTuple,
    DlpStakersPercentageUpdatedEvent.OutputTuple,
    DlpStakersPercentageUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EpochCreated"
  ): TypedContractEvent<
    EpochCreatedEvent.InputTuple,
    EpochCreatedEvent.OutputTuple,
    EpochCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EpochPerformancesSaved"
  ): TypedContractEvent<
    EpochPerformancesSavedEvent.InputTuple,
    EpochPerformancesSavedEvent.OutputTuple,
    EpochPerformancesSavedEvent.OutputObject
  >;
  getEvent(
    key: "EpochRewardAmountUpdated"
  ): TypedContractEvent<
    EpochRewardAmountUpdatedEvent.InputTuple,
    EpochRewardAmountUpdatedEvent.OutputTuple,
    EpochRewardAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EpochSizeUpdated"
  ): TypedContractEvent<
    EpochSizeUpdatedEvent.InputTuple,
    EpochSizeUpdatedEvent.OutputTuple,
    EpochSizeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MaxNumberOfRegisteredDlpsUpdated"
  ): TypedContractEvent<
    MaxNumberOfRegisteredDlpsUpdatedEvent.InputTuple,
    MaxNumberOfRegisteredDlpsUpdatedEvent.OutputTuple,
    MaxNumberOfRegisteredDlpsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinDlpStakeAmountUpdated"
  ): TypedContractEvent<
    MinDlpStakeAmountUpdatedEvent.InputTuple,
    MinDlpStakeAmountUpdatedEvent.OutputTuple,
    MinDlpStakeAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NumberOfTopDlpsUpdated"
  ): TypedContractEvent<
    NumberOfTopDlpsUpdatedEvent.InputTuple,
    NumberOfTopDlpsUpdatedEvent.OutputTuple,
    NumberOfTopDlpsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PerformancePercentagesUpdated"
  ): TypedContractEvent<
    PerformancePercentagesUpdatedEvent.InputTuple,
    PerformancePercentagesUpdatedEvent.OutputTuple,
    PerformancePercentagesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "StakerDlpEpochRewardClaimed"
  ): TypedContractEvent<
    StakerDlpEpochRewardClaimedEvent.InputTuple,
    StakerDlpEpochRewardClaimedEvent.OutputTuple,
    StakerDlpEpochRewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "DlpDeregistered(uint256)": TypedContractEvent<
      DlpDeregisteredEvent.InputTuple,
      DlpDeregisteredEvent.OutputTuple,
      DlpDeregisteredEvent.OutputObject
    >;
    DlpDeregistered: TypedContractEvent<
      DlpDeregisteredEvent.InputTuple,
      DlpDeregisteredEvent.OutputTuple,
      DlpDeregisteredEvent.OutputObject
    >;

    "DlpRegistered(uint256,address,address)": TypedContractEvent<
      DlpRegisteredEvent.InputTuple,
      DlpRegisteredEvent.OutputTuple,
      DlpRegisteredEvent.OutputObject
    >;
    DlpRegistered: TypedContractEvent<
      DlpRegisteredEvent.InputTuple,
      DlpRegisteredEvent.OutputTuple,
      DlpRegisteredEvent.OutputObject
    >;

    "DlpStakersPercentageUpdated(uint256,uint256)": TypedContractEvent<
      DlpStakersPercentageUpdatedEvent.InputTuple,
      DlpStakersPercentageUpdatedEvent.OutputTuple,
      DlpStakersPercentageUpdatedEvent.OutputObject
    >;
    DlpStakersPercentageUpdated: TypedContractEvent<
      DlpStakersPercentageUpdatedEvent.InputTuple,
      DlpStakersPercentageUpdatedEvent.OutputTuple,
      DlpStakersPercentageUpdatedEvent.OutputObject
    >;

    "EpochCreated(uint256)": TypedContractEvent<
      EpochCreatedEvent.InputTuple,
      EpochCreatedEvent.OutputTuple,
      EpochCreatedEvent.OutputObject
    >;
    EpochCreated: TypedContractEvent<
      EpochCreatedEvent.InputTuple,
      EpochCreatedEvent.OutputTuple,
      EpochCreatedEvent.OutputObject
    >;

    "EpochPerformancesSaved(uint256,bool)": TypedContractEvent<
      EpochPerformancesSavedEvent.InputTuple,
      EpochPerformancesSavedEvent.OutputTuple,
      EpochPerformancesSavedEvent.OutputObject
    >;
    EpochPerformancesSaved: TypedContractEvent<
      EpochPerformancesSavedEvent.InputTuple,
      EpochPerformancesSavedEvent.OutputTuple,
      EpochPerformancesSavedEvent.OutputObject
    >;

    "EpochRewardAmountUpdated(uint256)": TypedContractEvent<
      EpochRewardAmountUpdatedEvent.InputTuple,
      EpochRewardAmountUpdatedEvent.OutputTuple,
      EpochRewardAmountUpdatedEvent.OutputObject
    >;
    EpochRewardAmountUpdated: TypedContractEvent<
      EpochRewardAmountUpdatedEvent.InputTuple,
      EpochRewardAmountUpdatedEvent.OutputTuple,
      EpochRewardAmountUpdatedEvent.OutputObject
    >;

    "EpochSizeUpdated(uint256)": TypedContractEvent<
      EpochSizeUpdatedEvent.InputTuple,
      EpochSizeUpdatedEvent.OutputTuple,
      EpochSizeUpdatedEvent.OutputObject
    >;
    EpochSizeUpdated: TypedContractEvent<
      EpochSizeUpdatedEvent.InputTuple,
      EpochSizeUpdatedEvent.OutputTuple,
      EpochSizeUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MaxNumberOfRegisteredDlpsUpdated(uint256)": TypedContractEvent<
      MaxNumberOfRegisteredDlpsUpdatedEvent.InputTuple,
      MaxNumberOfRegisteredDlpsUpdatedEvent.OutputTuple,
      MaxNumberOfRegisteredDlpsUpdatedEvent.OutputObject
    >;
    MaxNumberOfRegisteredDlpsUpdated: TypedContractEvent<
      MaxNumberOfRegisteredDlpsUpdatedEvent.InputTuple,
      MaxNumberOfRegisteredDlpsUpdatedEvent.OutputTuple,
      MaxNumberOfRegisteredDlpsUpdatedEvent.OutputObject
    >;

    "MinDlpStakeAmountUpdated(uint256)": TypedContractEvent<
      MinDlpStakeAmountUpdatedEvent.InputTuple,
      MinDlpStakeAmountUpdatedEvent.OutputTuple,
      MinDlpStakeAmountUpdatedEvent.OutputObject
    >;
    MinDlpStakeAmountUpdated: TypedContractEvent<
      MinDlpStakeAmountUpdatedEvent.InputTuple,
      MinDlpStakeAmountUpdatedEvent.OutputTuple,
      MinDlpStakeAmountUpdatedEvent.OutputObject
    >;

    "NumberOfTopDlpsUpdated(uint256)": TypedContractEvent<
      NumberOfTopDlpsUpdatedEvent.InputTuple,
      NumberOfTopDlpsUpdatedEvent.OutputTuple,
      NumberOfTopDlpsUpdatedEvent.OutputObject
    >;
    NumberOfTopDlpsUpdated: TypedContractEvent<
      NumberOfTopDlpsUpdatedEvent.InputTuple,
      NumberOfTopDlpsUpdatedEvent.OutputTuple,
      NumberOfTopDlpsUpdatedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PerformancePercentagesUpdated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      PerformancePercentagesUpdatedEvent.InputTuple,
      PerformancePercentagesUpdatedEvent.OutputTuple,
      PerformancePercentagesUpdatedEvent.OutputObject
    >;
    PerformancePercentagesUpdated: TypedContractEvent<
      PerformancePercentagesUpdatedEvent.InputTuple,
      PerformancePercentagesUpdatedEvent.OutputTuple,
      PerformancePercentagesUpdatedEvent.OutputObject
    >;

    "Staked(address,uint256,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "StakerDlpEpochRewardClaimed(address,uint256,uint256,uint256)": TypedContractEvent<
      StakerDlpEpochRewardClaimedEvent.InputTuple,
      StakerDlpEpochRewardClaimedEvent.OutputTuple,
      StakerDlpEpochRewardClaimedEvent.OutputObject
    >;
    StakerDlpEpochRewardClaimed: TypedContractEvent<
      StakerDlpEpochRewardClaimedEvent.InputTuple,
      StakerDlpEpochRewardClaimedEvent.OutputTuple,
      StakerDlpEpochRewardClaimedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Unstaked(address,uint256,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
