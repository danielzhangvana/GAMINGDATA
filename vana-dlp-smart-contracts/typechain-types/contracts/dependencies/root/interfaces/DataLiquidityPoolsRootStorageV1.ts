/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IDataLiquidityPoolsRoot {
  export type DlpEpochInfoStruct = {
    ttf: BigNumberish;
    tfc: BigNumberish;
    vdu: BigNumberish;
    uw: BigNumberish;
    stakeAmount: BigNumberish;
    isTopDlp: boolean;
    rewardAmount: BigNumberish;
    stakersPercentage: BigNumberish;
  };

  export type DlpEpochInfoStructOutput = [
    ttf: bigint,
    tfc: bigint,
    vdu: bigint,
    uw: bigint,
    stakeAmount: bigint,
    isTopDlp: boolean,
    rewardAmount: bigint,
    stakersPercentage: bigint
  ] & {
    ttf: bigint;
    tfc: bigint;
    vdu: bigint;
    uw: bigint;
    stakeAmount: bigint;
    isTopDlp: boolean;
    rewardAmount: bigint;
    stakersPercentage: bigint;
  };

  export type DlpResponseStruct = {
    id: BigNumberish;
    dlpAddress: AddressLike;
    ownerAddress: AddressLike;
    status: BigNumberish;
    registrationBlockNumber: BigNumberish;
    grantedAmount: BigNumberish;
    stakersPercentage: BigNumberish;
    stakeAmount: BigNumberish;
  };

  export type DlpResponseStructOutput = [
    id: bigint,
    dlpAddress: string,
    ownerAddress: string,
    status: bigint,
    registrationBlockNumber: bigint,
    grantedAmount: bigint,
    stakersPercentage: bigint,
    stakeAmount: bigint
  ] & {
    id: bigint;
    dlpAddress: string;
    ownerAddress: string;
    status: bigint;
    registrationBlockNumber: bigint;
    grantedAmount: bigint;
    stakersPercentage: bigint;
    stakeAmount: bigint;
  };

  export type EpochInfoStruct = {
    startBlock: BigNumberish;
    endBlock: BigNumberish;
    reward: BigNumberish;
    isFinalised: boolean;
    dlpIds: BigNumberish[];
  };

  export type EpochInfoStructOutput = [
    startBlock: bigint,
    endBlock: bigint,
    reward: bigint,
    isFinalised: boolean,
    dlpIds: bigint[]
  ] & {
    startBlock: bigint;
    endBlock: bigint;
    reward: bigint;
    isFinalised: boolean;
    dlpIds: bigint[];
  };

  export type DlpPerformanceStruct = {
    dlpId: BigNumberish;
    ttf: BigNumberish;
    tfc: BigNumberish;
    vdu: BigNumberish;
    uw: BigNumberish;
  };

  export type DlpPerformanceStructOutput = [
    dlpId: bigint,
    ttf: bigint,
    tfc: bigint,
    vdu: bigint,
    uw: bigint
  ] & { dlpId: bigint; ttf: bigint; tfc: bigint; vdu: bigint; uw: bigint };

  export type StakerDlpEpochInfoStruct = {
    dlpId: BigNumberish;
    epochId: BigNumberish;
    stakeAmount: BigNumberish;
    rewardAmount: BigNumberish;
    claimAmount: BigNumberish;
  };

  export type StakerDlpEpochInfoStructOutput = [
    dlpId: bigint,
    epochId: bigint,
    stakeAmount: bigint,
    rewardAmount: bigint,
    claimAmount: bigint
  ] & {
    dlpId: bigint;
    epochId: bigint;
    stakeAmount: bigint;
    rewardAmount: bigint;
    claimAmount: bigint;
  };

  export type StakerDlpInfoStruct = {
    dlpId: BigNumberish;
    stakeAmount: BigNumberish;
    lastClaimedEpochId: BigNumberish;
  };

  export type StakerDlpInfoStructOutput = [
    dlpId: bigint,
    stakeAmount: bigint,
    lastClaimedEpochId: bigint
  ] & { dlpId: bigint; stakeAmount: bigint; lastClaimedEpochId: bigint };
}

export interface DataLiquidityPoolsRootStorageV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRewardForDlps"
      | "claimReward"
      | "claimRewardUntilEpoch"
      | "claimableAmount"
      | "createEpochs"
      | "createEpochsUntilBlockNumber"
      | "deregisterDlp"
      | "distributeStakeAfterDeregistration"
      | "dlpEpochs"
      | "dlpIds"
      | "dlps"
      | "dlpsByAddress"
      | "dlpsCount"
      | "epochRewardAmount"
      | "epochSize"
      | "epochs"
      | "epochsCount"
      | "maxNumberOfRegisteredDlps"
      | "minDlpStakeAmount"
      | "numberOfTopDlps"
      | "pause"
      | "registerDlp"
      | "registerDlpWithGrant"
      | "registeredDlps"
      | "saveEpochPerformances"
      | "stake"
      | "stakerDlpEpochs"
      | "stakerDlps"
      | "stakerDlpsList"
      | "stakerDlpsListCount"
      | "tfcPercentage"
      | "topDlpIds"
      | "totalDlpsRewardAmount"
      | "ttfPercentage"
      | "unpause"
      | "unstake"
      | "unstakebleAmount"
      | "updateDlpStakersPercentage"
      | "updateEpochRewardAmount"
      | "updateEpochSize"
      | "updateMaxNumberOfRegisteredDlps"
      | "updateMinDlpStakeAmount"
      | "updateNumberOfTopDlps"
      | "updatePerformancePercentages"
      | "uwPercentage"
      | "vduPercentage"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRewardForDlps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardUntilEpoch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createEpochsUntilBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterDlp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeStakeAfterDeregistration",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dlpEpochs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dlpIds", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "dlps", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "dlpsByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "dlpsCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epochSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxNumberOfRegisteredDlps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDlpStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfTopDlps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerDlp",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDlpWithGrant",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredDlps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveEpochPerformances",
    values: [
      BigNumberish,
      IDataLiquidityPoolsRoot.DlpPerformanceStruct[],
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakerDlpEpochs",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerDlps",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerDlpsList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerDlpsListCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tfcPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topDlpIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDlpsRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ttfPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakebleAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDlpStakersPercentage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpochRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpochSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxNumberOfRegisteredDlps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinDlpStakeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNumberOfTopDlps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerformancePercentages",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uwPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vduPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addRewardForDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardUntilEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEpochsUntilBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterDlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeStakeAfterDeregistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dlpEpochs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dlpIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dlps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dlpsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dlpsCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNumberOfRegisteredDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDlpStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfTopDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDlp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDlpWithGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveEpochPerformances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerDlpEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakerDlps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerDlpsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerDlpsListCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tfcPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topDlpIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDlpsRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ttfPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakebleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDlpStakersPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEpochRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEpochSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxNumberOfRegisteredDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinDlpStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNumberOfTopDlps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePerformancePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uwPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vduPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface DataLiquidityPoolsRootStorageV1 extends BaseContract {
  connect(runner?: ContractRunner | null): DataLiquidityPoolsRootStorageV1;
  waitForDeployment(): Promise<this>;

  interface: DataLiquidityPoolsRootStorageV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRewardForDlps: TypedContractMethod<[], [void], "payable">;

  claimReward: TypedContractMethod<[dlpId: BigNumberish], [void], "nonpayable">;

  claimRewardUntilEpoch: TypedContractMethod<
    [dlpId: BigNumberish, lastEpochToClaim: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimableAmount: TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  createEpochs: TypedContractMethod<[], [void], "nonpayable">;

  createEpochsUntilBlockNumber: TypedContractMethod<
    [blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  deregisterDlp: TypedContractMethod<
    [dlpId: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributeStakeAfterDeregistration: TypedContractMethod<
    [dlpId: BigNumberish, dlpOwnerAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  dlpEpochs: TypedContractMethod<
    [dlpId: BigNumberish, epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.DlpEpochInfoStructOutput],
    "view"
  >;

  dlpIds: TypedContractMethod<[dlpAddress: AddressLike], [bigint], "view">;

  dlps: TypedContractMethod<
    [index: BigNumberish],
    [IDataLiquidityPoolsRoot.DlpResponseStructOutput],
    "view"
  >;

  dlpsByAddress: TypedContractMethod<
    [dlpAddress: AddressLike],
    [IDataLiquidityPoolsRoot.DlpResponseStructOutput],
    "view"
  >;

  dlpsCount: TypedContractMethod<[], [bigint], "view">;

  epochRewardAmount: TypedContractMethod<[], [bigint], "view">;

  epochSize: TypedContractMethod<[], [bigint], "view">;

  epochs: TypedContractMethod<
    [epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.EpochInfoStructOutput],
    "view"
  >;

  epochsCount: TypedContractMethod<[], [bigint], "view">;

  maxNumberOfRegisteredDlps: TypedContractMethod<[], [bigint], "view">;

  minDlpStakeAmount: TypedContractMethod<[], [bigint], "view">;

  numberOfTopDlps: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  registerDlp: TypedContractMethod<
    [
      dlpAddress: AddressLike,
      ownerAddress: AddressLike,
      stakersPercentage: BigNumberish
    ],
    [void],
    "payable"
  >;

  registerDlpWithGrant: TypedContractMethod<
    [
      dlpAddress: AddressLike,
      ownerAddress: AddressLike,
      stakersPercentage: BigNumberish
    ],
    [void],
    "payable"
  >;

  registeredDlps: TypedContractMethod<[], [bigint[]], "view">;

  saveEpochPerformances: TypedContractMethod<
    [
      epochId: BigNumberish,
      dlpPerformances: IDataLiquidityPoolsRoot.DlpPerformanceStruct[],
      isFinalised: boolean
    ],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[dlpId: BigNumberish], [void], "payable">;

  stakerDlpEpochs: TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish, epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.StakerDlpEpochInfoStructOutput],
    "view"
  >;

  stakerDlps: TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [IDataLiquidityPoolsRoot.StakerDlpInfoStructOutput],
    "view"
  >;

  stakerDlpsList: TypedContractMethod<
    [stakerAddress: AddressLike],
    [IDataLiquidityPoolsRoot.StakerDlpInfoStructOutput[]],
    "view"
  >;

  stakerDlpsListCount: TypedContractMethod<
    [stakerAddress: AddressLike],
    [bigint],
    "view"
  >;

  tfcPercentage: TypedContractMethod<[], [bigint], "view">;

  topDlpIds: TypedContractMethod<
    [numberOfDlps: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;

  totalDlpsRewardAmount: TypedContractMethod<[], [bigint], "view">;

  ttfPercentage: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unstake: TypedContractMethod<
    [dlpId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  unstakebleAmount: TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  updateDlpStakersPercentage: TypedContractMethod<
    [dlpId: BigNumberish, stakersPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateEpochRewardAmount: TypedContractMethod<
    [newEpochRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateEpochSize: TypedContractMethod<
    [newEpochSize: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxNumberOfRegisteredDlps: TypedContractMethod<
    [newMaxNumberOfRegisteredDlps: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinDlpStakeAmount: TypedContractMethod<
    [newMinStakeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateNumberOfTopDlps: TypedContractMethod<
    [newNumberOfTopDlps: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePerformancePercentages: TypedContractMethod<
    [
      newTtfPercentage: BigNumberish,
      newTfcPercentage: BigNumberish,
      newVduPercentage: BigNumberish,
      newUwPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  uwPercentage: TypedContractMethod<[], [bigint], "view">;

  vduPercentage: TypedContractMethod<[], [bigint], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRewardForDlps"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[dlpId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRewardUntilEpoch"
  ): TypedContractMethod<
    [dlpId: BigNumberish, lastEpochToClaim: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimableAmount"
  ): TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createEpochs"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEpochsUntilBlockNumber"
  ): TypedContractMethod<[blockNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deregisterDlp"
  ): TypedContractMethod<[dlpId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeStakeAfterDeregistration"
  ): TypedContractMethod<
    [dlpId: BigNumberish, dlpOwnerAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dlpEpochs"
  ): TypedContractMethod<
    [dlpId: BigNumberish, epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.DlpEpochInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "dlpIds"
  ): TypedContractMethod<[dlpAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "dlps"
  ): TypedContractMethod<
    [index: BigNumberish],
    [IDataLiquidityPoolsRoot.DlpResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "dlpsByAddress"
  ): TypedContractMethod<
    [dlpAddress: AddressLike],
    [IDataLiquidityPoolsRoot.DlpResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "dlpsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochRewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochs"
  ): TypedContractMethod<
    [epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.EpochInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "epochsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxNumberOfRegisteredDlps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDlpStakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberOfTopDlps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerDlp"
  ): TypedContractMethod<
    [
      dlpAddress: AddressLike,
      ownerAddress: AddressLike,
      stakersPercentage: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registerDlpWithGrant"
  ): TypedContractMethod<
    [
      dlpAddress: AddressLike,
      ownerAddress: AddressLike,
      stakersPercentage: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registeredDlps"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "saveEpochPerformances"
  ): TypedContractMethod<
    [
      epochId: BigNumberish,
      dlpPerformances: IDataLiquidityPoolsRoot.DlpPerformanceStruct[],
      isFinalised: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[dlpId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "stakerDlpEpochs"
  ): TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish, epochId: BigNumberish],
    [IDataLiquidityPoolsRoot.StakerDlpEpochInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakerDlps"
  ): TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [IDataLiquidityPoolsRoot.StakerDlpInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakerDlpsList"
  ): TypedContractMethod<
    [stakerAddress: AddressLike],
    [IDataLiquidityPoolsRoot.StakerDlpInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakerDlpsListCount"
  ): TypedContractMethod<[stakerAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tfcPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "topDlpIds"
  ): TypedContractMethod<
    [numberOfDlps: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalDlpsRewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ttfPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<
    [dlpId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unstakebleAmount"
  ): TypedContractMethod<
    [stakerAddress: AddressLike, dlpId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDlpStakersPercentage"
  ): TypedContractMethod<
    [dlpId: BigNumberish, stakersPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEpochRewardAmount"
  ): TypedContractMethod<
    [newEpochRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEpochSize"
  ): TypedContractMethod<[newEpochSize: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxNumberOfRegisteredDlps"
  ): TypedContractMethod<
    [newMaxNumberOfRegisteredDlps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMinDlpStakeAmount"
  ): TypedContractMethod<
    [newMinStakeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateNumberOfTopDlps"
  ): TypedContractMethod<
    [newNumberOfTopDlps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePerformancePercentages"
  ): TypedContractMethod<
    [
      newTtfPercentage: BigNumberish,
      newTfcPercentage: BigNumberish,
      newVduPercentage: BigNumberish,
      newUwPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uwPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vduPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
