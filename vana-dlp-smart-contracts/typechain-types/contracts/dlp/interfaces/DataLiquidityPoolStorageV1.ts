/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IDataLiquidityPool {
  export type FileResponseStruct = {
    fileId: BigNumberish;
    timestamp: BigNumberish;
    proofIndex: BigNumberish;
    rewardAmount: BigNumberish;
  };

  export type FileResponseStructOutput = [
    fileId: bigint,
    timestamp: bigint,
    proofIndex: bigint,
    rewardAmount: bigint
  ] & {
    fileId: bigint;
    timestamp: bigint;
    proofIndex: bigint;
    rewardAmount: bigint;
  };

  export type ContributorInfoResponseStruct = {
    contributorAddress: AddressLike;
    filesListCount: BigNumberish;
  };

  export type ContributorInfoResponseStructOutput = [
    contributorAddress: string,
    filesListCount: bigint
  ] & { contributorAddress: string; filesListCount: bigint };
}

export interface DataLiquidityPoolStorageV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRewardsForContributors"
      | "contributorFiles"
      | "contributorInfo"
      | "contributors"
      | "contributorsCount"
      | "dataRegistry"
      | "fileRewardFactor"
      | "files"
      | "filesListAt"
      | "filesListCount"
      | "masterKey"
      | "name"
      | "pause"
      | "proofInstruction"
      | "requestReward"
      | "teePool"
      | "token"
      | "totalContributorsRewardAmount"
      | "unpause"
      | "updateFileRewardFactor"
      | "updateMasterKey"
      | "updateProofInstruction"
      | "updateTeePool"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRewardsForContributors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorFiles",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fileRewardFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "files", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "filesListAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "filesListCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "masterKey", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proofInstruction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "teePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalContributorsRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFileRewardFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMasterKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProofInstruction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTeePool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addRewardsForContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorFiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fileRewardFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "files", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "filesListAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filesListCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "masterKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proofInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalContributorsRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFileRewardFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMasterKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProofInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTeePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface DataLiquidityPoolStorageV1 extends BaseContract {
  connect(runner?: ContractRunner | null): DataLiquidityPoolStorageV1;
  waitForDeployment(): Promise<this>;

  interface: DataLiquidityPoolStorageV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRewardsForContributors: TypedContractMethod<
    [contributorsRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  contributorFiles: TypedContractMethod<
    [contributorAddress: AddressLike, index: BigNumberish],
    [IDataLiquidityPool.FileResponseStructOutput],
    "view"
  >;

  contributorInfo: TypedContractMethod<
    [contributorAddress: AddressLike],
    [IDataLiquidityPool.ContributorInfoResponseStructOutput],
    "view"
  >;

  contributors: TypedContractMethod<
    [index: BigNumberish],
    [IDataLiquidityPool.ContributorInfoResponseStructOutput],
    "view"
  >;

  contributorsCount: TypedContractMethod<[], [bigint], "view">;

  dataRegistry: TypedContractMethod<[], [string], "view">;

  fileRewardFactor: TypedContractMethod<[], [bigint], "view">;

  files: TypedContractMethod<
    [fileId: BigNumberish],
    [IDataLiquidityPool.FileResponseStructOutput],
    "view"
  >;

  filesListAt: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  filesListCount: TypedContractMethod<[], [bigint], "view">;

  masterKey: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  proofInstruction: TypedContractMethod<[], [string], "view">;

  requestReward: TypedContractMethod<
    [registryFileId: BigNumberish, proofIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  teePool: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  totalContributorsRewardAmount: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateFileRewardFactor: TypedContractMethod<
    [newFileRewardFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMasterKey: TypedContractMethod<
    [newProofInstruction: string],
    [void],
    "nonpayable"
  >;

  updateProofInstruction: TypedContractMethod<
    [newProofInstruction: string],
    [void],
    "nonpayable"
  >;

  updateTeePool: TypedContractMethod<
    [newTeePool: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRewardsForContributors"
  ): TypedContractMethod<
    [contributorsRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contributorFiles"
  ): TypedContractMethod<
    [contributorAddress: AddressLike, index: BigNumberish],
    [IDataLiquidityPool.FileResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributorInfo"
  ): TypedContractMethod<
    [contributorAddress: AddressLike],
    [IDataLiquidityPool.ContributorInfoResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributors"
  ): TypedContractMethod<
    [index: BigNumberish],
    [IDataLiquidityPool.ContributorInfoResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributorsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dataRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fileRewardFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "files"
  ): TypedContractMethod<
    [fileId: BigNumberish],
    [IDataLiquidityPool.FileResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "filesListAt"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "filesListCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "masterKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proofInstruction"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requestReward"
  ): TypedContractMethod<
    [registryFileId: BigNumberish, proofIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "teePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalContributorsRewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFileRewardFactor"
  ): TypedContractMethod<
    [newFileRewardFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMasterKey"
  ): TypedContractMethod<[newProofInstruction: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProofInstruction"
  ): TypedContractMethod<[newProofInstruction: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTeePool"
  ): TypedContractMethod<[newTeePool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
